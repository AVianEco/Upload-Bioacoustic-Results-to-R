# See the dataframe you just made
view(ID_rawdata)
#Print the first entry in the INDIR column.
head(ID_rawdata$INDIR,1)
INDIR_headers<- c("insert","heading","names","for","each","item","between","semicolons", "nine","ten","eleven","twelve","thirteen")
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], ";")) {
print("No, skip to Headers for the MANUAL.ID. column")
} else {
print("Yes, here is the first row")
head(ID_rawdata$FOLDER, 1)
}
# Find the "MANUAL.ID" with the most commas, and print it.
max_index <- str_count(ID_rawdata$MANUAL_ID, ",")%>%
which.max()
print(ID_rawdata[max_index,"MANUAL_ID"])
MANUAL_ID_headers<- c("insert","heading","names","for")
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_rawdata, col = INDIR, into = c(INDIR_headers), sep = ";", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Split out the filepaths in the FOLDER column to new columns, if necessary.
if(is.na(ID_data$FOLDER[1]) || !str_detect(ID_data$FOLDER[1], ";")) {
message("No split necessary for FOLDER column, the ID_data dataframe still has ", ncol(ID_data), " columns.")
} else {
ID_data <- separate(data = ID_data, col = FOLDER, into = c(FOLDER_headers), sep = ";", remove = FALSE)
message("FOLDER column was split into ", ncol(ID_data), " new columns")
}
#Split out the annotations in the MANUAL.ID. column to new columns.
ID_data<-separate(data = ID_data, col = MANUAL_ID, into = c(MANUAL_ID_headers), sep = ",", remove = FALSE)
message("The ID_data dataframe has ", ncol(ID_data), " columns, now")
# ------Clear the Workspace-------
rm(list = ls())
# ------Load Libraries------
library(tidyverse)
library(tcltk)
# ------Define File Locations and Output Name*------
# Find the file name and path to the saved cluster file on your computer.
source_filepath <- file.choose()
# Find the directory where you'd like to save the modified output csv.
destination_filepath <- tk_choose.dir()
#Edit the file name within the "" below to name the output csv. Name it with a different name from the input file name.
output_CSV_name <-"KPRO_ID_data.csv"
# Read in the CSV file (cluster.csv OR id.csv) as a character vector
ID_rawdata <- scan(source_filepath, what = "character", sep = "\n")
# Replace all the backslashes in cells of this dataframe with semi-colons
ID_rawdata <- gsub("\\", ";", ID_rawdata,fixed=TRUE)
#Get column names from the original csv file
raw_headers <- as.character(read.csv(source_filepath, nrow=1, header=FALSE))
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
clean_headers <- gsub(" ", "_", raw_headers)
clean_headers <- gsub("\\*", "", clean_headers)
# Convert the character vector into a data frame
ID_rawdata <- read.csv(textConnection(ID_rawdata), header = TRUE, col.names = clean_headers)
# See the dataframe you just made
view(ID_rawdata)
#Print the first entry in the INDIR column.
head(ID_rawdata$INDIR,1)
INDIR_headers<- c("insert","heading","names","for","each","item","between","semicolons", "nine","ten","eleven","twelve","thirteen")
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], ";")) {
print("No, skip to Headers for the MANUAL.ID. column")
} else {
print("Yes, here is the first row")
head(ID_rawdata$FOLDER, 1)
}
# Find the "MANUAL.ID" with the most commas, and print it.
max_index <- str_count(ID_rawdata$MANUAL_ID, ",")%>%
which.max()
print(ID_rawdata[max_index,"MANUAL_ID"])
MANUAL_ID_headers<- c("insert","heading","names","for")
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_rawdata, col = INDIR, into = c(INDIR_headers), sep = ";", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Split out the filepaths in the FOLDER column to new columns, if necessary.
if(is.na(ID_data$FOLDER[1]) || !str_detect(ID_data$FOLDER[1], ";")) {
message("No split necessary for FOLDER column, the ID_data dataframe still has ", ncol(ID_data), " columns.")
} else {
ID_data <- separate(data = ID_data, col = FOLDER, into = c(FOLDER_headers), sep = ";", remove = FALSE)
message("FOLDER column was split into ", ncol(ID_data), " new columns")
}
#Split out the annotations in the MANUAL.ID. column to new columns.
ID_data<-separate(data = ID_data, col = MANUAL_ID, into = c(MANUAL_ID_headers), sep = ",", remove = FALSE)
message("The ID_data dataframe has ", ncol(ID_data), " columns, now")
View(ID_data)
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_rawdata, col = INDIR, into = c(INDIR_headers), sep = ";", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_rawdata, col = INDIR, into = c(INDIR_headers), sep = ";", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_data, col = INDIR, into = c(INDIR_headers), sep = ";", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_data, col = INDIR, into = c(INDIR_headers), sep = ";", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Split out the filepaths in the FOLDER column to new columns, if necessary.
if(is.na(ID_data$FOLDER[1]) || !str_detect(ID_data$FOLDER[1], ";")) {
message("No split necessary for FOLDER column, the ID_data dataframe still has ", ncol(ID_data), " columns.")
} else {
ID_data <- separate(data = ID_data, col = FOLDER, into = c(FOLDER_headers), sep = ";", remove = FALSE)
message("FOLDER column was split into ", ncol(ID_data), " new columns")
}
#Split out the annotations in the MANUAL.ID. column to new columns.
ID_data<-separate(data = ID_data, col = MANUAL_ID, into = c(MANUAL_ID_headers), sep = ",", remove = FALSE)
message("The ID_data dataframe has ", ncol(ID_data), " columns, now")
MANUAL_ID_headers<- c("one","two","three","four")
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_data, col = INDIR, into = c(INDIR_headers), sep = ";", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Split out the filepaths in the FOLDER column to new columns, if necessary.
if(is.na(ID_data$FOLDER[1]) || !str_detect(ID_data$FOLDER[1], ";")) {
message("No split necessary for FOLDER column, the ID_data dataframe still has ", ncol(ID_data), " columns.")
} else {
ID_data <- separate(data = ID_data, col = FOLDER, into = c(FOLDER_headers), sep = ";", remove = FALSE)
message("FOLDER column was split into ", ncol(ID_data), " new columns")
}
#Split out the annotations in the MANUAL.ID. column to new columns.
ID_data<-separate(data = ID_data, col = MANUAL_ID, into = c(MANUAL_ID_headers), sep = ",", remove = FALSE)
message("The ID_data dataframe has ", ncol(ID_data), " columns, now")
# ------Clear the Workspace-------
rm(list = ls())
# ------Load Libraries------
library(tidyverse)
library(tcltk)
# ------Define File Locations and Output Name*------
# Find the file name and path to the saved cluster file on your computer.
source_filepath <- file.choose()
# Find the directory where you'd like to save the modified output csv.
destination_filepath <- tk_choose.dir()
#Edit the file name within the "" below to name the output csv. Name it with a different name from the input file name.
output_CSV_name <-"KPRO_ID_data.csv"
#Read in CSV file
ID_rawdata <- read.table(source_filepath, sep=",", quote="", header= TRUE)
#Read in CSV file
ID_rawdata <- read.table(source_filepath, sep=",", header= TRUE)
View(ID_rawdata)
data <- data.frame(ID_rawdata, str_split(data$path, "\\\\"))
data <- data.frame(ID_rawdata, str_split(ID_rawdata$INDIR, "\\\\"))
INDIR_headers<-c("A","B","C","D","E","F","G","H","I","J","K","L","M")
ID_data<-separate(data = ID_data, col = INDIR, into = c(INDIR_headers), sep = "\\\\", remove = FALSE)
#Read in CSV file
ID_rawdata <- read.table(source_filepath, sep=",", header= TRUE)
INDIR_headers<-c("A","B","C","D","E","F","G","H","I","J","K","L","M")
ID_data<-separate(data = ID_rawdata, col = INDIR, into = c(INDIR_headers), sep = "\\\\", remove = FALSE)
View(ID_data)
# ------Clear the Workspace-------
rm(list = ls())
# ------Load Libraries------
library(tidyverse)
library(tcltk)
# ------Define File Locations and Output Name*------
# Find the file name and path to the saved cluster file on your computer.
source_filepath <- file.choose()
# Find the directory where you'd like to save the modified output csv.
destination_filepath <- tk_choose.dir()
#Edit the file name within the "" below to name the output csv. Name it with a different name from the input file name.
output_CSV_name <-"KPRO_ID_data.csv"
#Read in CSV file
ID_rawdata <- read.table(source_filepath, sep=",", header= TRUE)
#Get column names from the original csv file
raw_headers <- as.character(read.csv(source_filepath, nrow=1, header=FALSE))
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
clean_headers <- gsub(" ", "_", raw_headers)
clean_headers <- gsub("\\*", "", clean_headers)
ID_rawdata <- colnames(clean_headers)
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
clean_headers <- gsub(" ", "_", raw_headers) %>%
gsub("\\*", "", clean_headers)
#Read in CSV file
ID_rawdata <- read.table(source_filepath, sep=",", header= TRUE)
#Get column names from the original csv file
raw_headers <- as.character(read.csv(source_filepath, nrow=1, header=FALSE))
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
clean_headers <- gsub(" ", "_", raw_headers) %>%
gsub("\\*", "", clean_headers)
#Get column names from the original csv file
raw_headers <- as.character(read.csv(source_filepath, nrow=1, header=FALSE))
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
clean_headers <- gsub(" ", "_", raw_headers)
clean_headers <- gsub("\\*", "", clean_headers)
colnames(ID_rawdata)<-clean_headers
View(ID_rawdata)
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
#clean_headers <- gsub(" ", "_", raw_headers)
#clean_headers <- gsub("\\*", "", clean_headers)
clean_headers <- str_replace_all(raw_headers, c(" " = "_", "\\*" = ""))
#Get column names from the original csv file
raw_headers <- as.character(read.csv(source_filepath, nrow=1, header=FALSE))
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
#clean_headers <- gsub(" ", "_", raw_headers)
#clean_headers <- gsub("\\*", "", clean_headers)
clean_headers <- str_replace_all(raw_headers, c(" " = "_", "\\*" = ""))
colnames(ID_rawdata)<-clean_headers
# See the dataframe you just made
view(ID_rawdata)
#Print the first entry in the INDIR column.
head(ID_rawdata$INDIR,1)
#Examine the printed example, define column headers for each nested file folder listed between the semi-colons.
INDIR_headers<- c("insert","heading","names","for","each","item","between","semicolons")
source("C:/Users/Tyne/OneDrive/Documents/Work/AVian/BIOACOUSTICS TOOLS/ONLINE COURSE/RScripts/Upload-Bioacoustic-Results-to-R/upload_ManualID_from_KailedescopePro.R", echo=TRUE)
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], ";")) {
print("No, skip to Headers for the MANUAL.ID. column")
} else {
print("Yes, here is the first row")
head(ID_rawdata$FOLDER, 1)
}
# ------Clear the Workspace-------
rm(list = ls())
# ------Load Libraries------
library(tidyverse)
library(tcltk)
# ------Define File Locations and Output Name*------
# Find the file name and path to the saved cluster file on your computer.
source_filepath <- file.choose()
# Find the directory where you'd like to save the modified output csv.
destination_filepath <- tk_choose.dir()
#Edit the file name within the "" below to name the output csv. Name it with a different name from the input file name.
output_CSV_name <-"KPRO_ID_data.csv"
#Read in CSV file
ID_rawdata <- read.table(source_filepath, sep=",", header= TRUE)
#Get column names from the original csv file
raw_headers <- as.character(read.csv(source_filepath, nrow=1, header=FALSE))
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
clean_headers <- str_replace_all(raw_headers, c(" " = "_", "\\*" = ""))
#replace the headers in the raw dataset with the cleaned headers
colnames(ID_rawdata)<-clean_headers
# See the dataframe you just made
view(ID_rawdata)
#Print the first entry in the INDIR column.
head(ID_rawdata$INDIR,1)
INDIR_headers<-c("A","B","C","D","E","F","G","H","I","J","K","L","M")
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], ";")) {
print("No, skip to Headers for the MANUAL.ID. column")
} else {
print("Yes, here is the first row")
head(ID_rawdata$FOLDER, 1)
}
# Find the "MANUAL.ID" with the most commas, and print it.
max_index <- str_count(ID_rawdata$MANUAL_ID, ",")%>%
which.max()
print(ID_rawdata[max_index,"MANUAL_ID"])
MANUAL_ID_headers<- c("insert","heading","names","for")
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_data, col = INDIR, into = c(INDIR_headers), sep = "\\\\", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Split out the filepaths in the FOLDER column to new columns, if necessary.
if(is.na(ID_data$FOLDER[1]) || !str_detect(ID_data$FOLDER[1], "\\\\")) {
message("No split necessary for FOLDER column, the ID_data dataframe still has ", ncol(ID_data), " columns.")
} else {
ID_data <- separate(data = ID_data, col = FOLDER, into = c(FOLDER_headers), sep = "\\\\", remove = FALSE)
message("FOLDER column was split into ", ncol(ID_data), " new columns")
}
#Split out the annotations in the MANUAL.ID. column to new columns.
ID_data<-separate(data = ID_data, col = MANUAL_ID, into = c(MANUAL_ID_headers), sep = "\\\\", remove = FALSE)
message("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#View the final modified ID_data dataframe, verify it is complete.
view(ID_data)
#Export ID_data to a CSV, so you can import into other scripts or statitical analyses.
write.csv(ID_data, file.path(destination_filepath,output_CSV_name), row.names=FALSE)
#Print the first entry in the INDIR column.
head(ID_rawdata$INDIR,1)
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], ";")) {
print("No, skip to Headers for the MANUAL_ID column")
} else {
max_index_FOLDER <- str_count(ID_rawdata$FOLDER, "\\\\")%>%
which.max()
print("Yes, here is the row with the most delimiters", ID_rawdata[max_index,"FOLDER"])
}
# ------Clear the Workspace-------
rm(list = ls())
# ------Load Libraries------
library(tidyverse)
library(tcltk)
# ------Define File Locations and Output Name*------
# Find the file name and path to the saved cluster file on your computer.
source_filepath <- file.choose()
# ------Define File Locations and Output Name*------
# Find the file name and path to the saved cluster file on your computer.
source_filepath <- file.choose()
# Find the directory where you'd like to save the modified output csv.
destination_filepath <- tk_choose.dir()
# Find the directory where you'd like to save the modified output csv.
destination_filepath <- tk_choose.dir()
#Edit the file name within the "" below to name the output csv. Name it with a different name from the input file name.
output_CSV_name <-"KPRO_ID_data.csv"
#Read in CSV file
ID_rawdata <- read.table(source_filepath, sep=",", header= TRUE)
#Get column names from the original csv file
raw_headers <- as.character(read.csv(source_filepath, nrow=1, header=FALSE))
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
clean_headers <- str_replace_all(raw_headers, c(" " = "_", "\\*" = ""))
#replace the headers in the raw dataset with the cleaned headers
colnames(ID_rawdata)<-clean_headers
# See the dataframe you just made
view(ID_rawdata)
#Print the first entry in the INDIR column.
head(ID_rawdata$INDIR,1)
INDIR_headers<-c("A","B","C","D","E","F","G","H","I","J","K","L","M")
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], ";")) {
print("No, skip to Headers for the MANUAL_ID column")
} else {
max_index_FOLDER <- str_count(ID_rawdata$FOLDER, "\\\\")%>%
which.max()
print("Yes, here is the row with the most delimiters", ID_rawdata[max_index_FOLDER,"FOLDER"])
}
View(ID_rawdata)
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], "\\\\")) {
print("No, skip to Headers for the MANUAL_ID column")
} else {
max_index_FOLDER <- str_count(ID_rawdata$FOLDER, "\\\\")%>%
which.max()
print("Yes, here is the row with the most delimiters", ID_rawdata[max_index_FOLDER,"FOLDER"])
}
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], "\\\\")) {
print("No, skip to Headers for the MANUAL_ID column")
} else {
max_index_FOLDER <- str_count(ID_rawdata$FOLDER, "\\\\")%>%
which.max()
message("Yes, here is the row with the most delimiters", ID_rawdata[max_index_FOLDER,"FOLDER"])
}
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], "\\\\")) {
print("No, skip to Headers for the MANUAL_ID column")
} else {
max_index_FOLDER <- str_count(ID_rawdata$FOLDER, "\\\\")%>%
which.max()
message("Yes, here is the row with the most delimiters: ", ID_rawdata[max_index_FOLDER,"FOLDER"])
}
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], "\\\\")) {
message("No, skip to Headers for the MANUAL_ID column")
} else {
max_index_FOLDER <- str_count(ID_rawdata$FOLDER, "\\\\")%>%
which.max()
message("Yes, here is the row with the most delimiters: ", ID_rawdata[max_index_FOLDER,"FOLDER"])
}
FOLDER_headers<- c("insert","heading","names")
FOLDER_headers<- c("tic","tac","toe")
# Find the "MANUAL_ID" with the most commas, and print it.
max_index_ID <- str_count(ID_rawdata$MANUAL_ID, ",")%>%
which.max()
print(ID_rawdata[max_index_ID,"MANUAL_ID"])
# Find the "MANUAL_ID" with the most commas, and print it.
max_index_ID <- str_count(ID_rawdata$MANUAL_ID, ",")%>%
which.max()
message("Here is the MANUAL_ID row with the most delimiters: ", ID_rawdata[max_index_ID,"MANUAL_ID"])
MANUAL_ID_headers<- c("insert","heading","names","for")
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_data, col = INDIR, into = c(INDIR_headers), sep = "\\\\", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Split out the filepaths in the FOLDER column to new columns, if necessary.
if(is.na(ID_data$FOLDER[1]) || !str_detect(ID_data$FOLDER[1], "\\\\")) {
message("No split necessary for FOLDER column, the ID_data dataframe still has ", ncol(ID_data), " columns.")
} else {
ID_data <- separate(data = ID_data, col = FOLDER, into = c(FOLDER_headers), sep = "\\\\", remove = FALSE)
message("FOLDER column was split into ", ncol(ID_data), " new columns")
}
#Split out the annotations in the MANUAL.ID. column to new columns.
ID_data<-separate(data = ID_data, col = MANUAL_ID, into = c(MANUAL_ID_headers), sep = "\\\\", remove = FALSE)
message("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#View the final modified ID_data dataframe, verify it is complete.
view(ID_data)
# ------Clear the Workspace-------
rm(list = ls())
# ------Load Libraries------
library(tidyverse)
library(tcltk)
# ------Define File Locations and Output Name*------
# Find the file name and path to the saved cluster file on your computer.
source_filepath <- file.choose()
# Find the directory where you'd like to save the modified output csv.
destination_filepath <- tk_choose.dir()
#Edit the file name within the "" below to name the output csv. Name it with a different name from the input file name.
output_CSV_name <-"CLUSTER_ID_data.csv"
#Read in CSV file
ID_rawdata <- read.table(source_filepath, sep=",", header= TRUE)
#Get column names from the original csv file
raw_headers <- as.character(read.csv(source_filepath, nrow=1, header=FALSE))
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
clean_headers <- str_replace_all(raw_headers, c(" " = "_", "\\*" = ""))
#replace the headers in the raw dataset with the cleaned headers
colnames(ID_rawdata)<-clean_headers
# See the dataframe you just made
view(ID_rawdata)
#Print the first entry in the INDIR column.
head(ID_rawdata$INDIR,1)
INDIR_headers<- c("disk","project","Times_Analysed")
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], "\\\\")) {
message("No, skip to Headers for the MANUAL_ID column")
} else {
max_index_FOLDER <- str_count(ID_rawdata$FOLDER, "\\\\")%>%
which.max()
message("Yes, here is the FOLDER row with the most delimiters: ", ID_rawdata[max_index_FOLDER,"FOLDER"])
}
FOLDER_headers<- c("Site_ID","Data_Subfolder")
# Find the "MANUAL_ID" with the most commas, and print it.
max_index_ID <- str_count(ID_rawdata$MANUAL_ID, ",")%>%
which.max()
message("Here is the MANUAL_ID row with the most delimiters: ", ID_rawdata[max_index_ID,"MANUAL_ID"])
MANUAL_ID_headers<- c("ID1","ID2","ID3","ID4","ID5","ID6")
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_data, col = INDIR, into = c(INDIR_headers), sep = "\\\\", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Split out the filepaths in the FOLDER column to new columns, if necessary.
if(is.na(ID_data$FOLDER[1]) || !str_detect(ID_data$FOLDER[1], "\\\\")) {
message("No split necessary for FOLDER column, the ID_data dataframe still has ", ncol(ID_data), " columns.")
} else {
ID_data <- separate(data = ID_data, col = FOLDER, into = c(FOLDER_headers), sep = "\\\\", remove = FALSE)
message("FOLDER column was split into ", ncol(ID_data), " new columns")
}
#Split out the annotations in the MANUAL.ID. column to new columns.
ID_data<-separate(data = ID_data, col = MANUAL_ID, into = c(MANUAL_ID_headers), sep = ",", remove = FALSE)
message("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#View the final modified ID_data dataframe, verify it is complete.
view(ID_data)
#Export ID_data to a CSV, so you can import into other scripts or statitical analyses.
write.csv(ID_data, file.path(destination_filepath,output_CSV_name), row.names=FALSE)
# ------Clear the Workspace-------
rm(list = ls())
# ------Load Libraries------
library(tidyverse)
library(tcltk)
# ------Define File Locations and Output Name*------
# Find the file name and path to the saved cluster file on your computer.
source_filepath <- file.choose()
# Find the directory where you'd like to save the modified output csv.
destination_filepath <- tk_choose.dir()
#Edit the file name within the "" below to name the output csv. Name it with a different name from the input file name.
output_CSV_name <-"KPRO_ID_data.csv"
#Read in CSV file
ID_rawdata <- read.table(source_filepath, sep=",", header= TRUE)
#Get column names from the original csv file
raw_headers <- as.character(read.csv(source_filepath, nrow=1, header=FALSE))
# Clean these headers by replacing spaces with underscores and asterisks with empty strings
clean_headers <- str_replace_all(raw_headers, c(" " = "_", "\\*" = ""))
#replace the headers in the raw dataset with the cleaned headers
colnames(ID_rawdata)<-clean_headers
# See the dataframe you just made
view(ID_rawdata)
#Print the first entry in the INDIR column.
head(ID_rawdata$INDIR,1)
#Examine the printed example, define column headers for each nested file folder listed between the semi-colons.
INDIR_headers<- c("insert","heading","names","for","each","item","between","slashes")
INDIR_headers<- c("Disk","Project","Times_analyzed")
#Does the FOLDER column contains more than one category?
if(is.na(ID_rawdata$FOLDER[1]) || !str_detect(ID_rawdata$FOLDER[1], "\\\\")) {
message("No, skip to Headers for the MANUAL_ID column")
} else {
max_index_FOLDER <- str_count(ID_rawdata$FOLDER, "\\\\")%>%
which.max()
message("Yes, here is the FOLDER row with the most delimiters: ", ID_rawdata[max_index_FOLDER,"FOLDER"])
}
FOLDER_headers<- c("Site_ID","Data_subfolder")
# Find the "MANUAL_ID" with the most commas, and print it.
max_index_ID <- str_count(ID_rawdata$MANUAL_ID, ",")%>%
which.max()
message("Here is the MANUAL_ID row with the most delimiters: ", ID_rawdata[max_index_ID,"MANUAL_ID"])
MANUAL_ID_headers<- c("ID1","ID2","ID3","ID4","ID5","ID6")
#Create a new dataframe where we will do our manipulations
ID_data<- ID_rawdata
message("The unmodified ID_data dataframe has ", ncol(ID_data), " columns")
#Split out the filepaths in the INDIR column to new columns.
ID_data<-separate(data = ID_data, col = INDIR, into = c(INDIR_headers), sep = "\\\\", remove = FALSE)
message ("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#Split out the filepaths in the FOLDER column to new columns, if necessary.
if(is.na(ID_data$FOLDER[1]) || !str_detect(ID_data$FOLDER[1], "\\\\")) {
message("No split necessary for FOLDER column, the ID_data dataframe still has ", ncol(ID_data), " columns.")
} else {
ID_data <- separate(data = ID_data, col = FOLDER, into = c(FOLDER_headers), sep = "\\\\", remove = FALSE)
message("FOLDER column was split into ", ncol(ID_data), " new columns")
}
#Split out the annotations in the MANUAL.ID. column to new columns.
ID_data<-separate(data = ID_data, col = MANUAL_ID, into = c(MANUAL_ID_headers), sep = ",", remove = FALSE)
message("The ID_data dataframe has ", ncol(ID_data), " columns, now")
#View the final modified ID_data dataframe, verify it is complete.
view(ID_data)
#Export ID_data to a CSV, so you can import into other scripts or statitical analyses.
write.csv(ID_data, file.path(destination_filepath,output_CSV_name), row.names=FALSE)
